<?php
/**
 * CreatedShipment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BrengerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brenger API
 *
 * API specification for the Brenger API
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: mail@level-level.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BrengerClient\Model;

use \ArrayAccess;
use \BrengerClient\ObjectSerializer;

/**
 * CreatedShipment Class Doc Comment
 *
 * @category Class
 * @package  BrengerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreatedShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatedShipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'item_sets' => '\BrengerClient\Model\ItemSetPart[]',
        'pickup' => '\BrengerClient\Model\ShipmentPickup',
        'delivery' => '\BrengerClient\Model\ShipmentPickup',
        'delivery_time_window' => '\BrengerClient\Model\TimeWindow',
        'pickup_time_window' => '\BrengerClient\Model\TimeWindow',
        'shipped_by' => '\BrengerClient\Model\ShippedBy',
        'shipping_date' => 'string',
        'shipping_label' => '\BrengerClient\Model\CreatedShipmentAllOf1ShippingLabel',
        'state' => 'string',
        'tracking_id' => 'string',
        'tracking_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'item_sets' => null,
        'pickup' => null,
        'delivery' => null,
        'delivery_time_window' => null,
        'pickup_time_window' => null,
        'shipped_by' => null,
        'shipping_date' => null,
        'shipping_label' => null,
        'state' => null,
        'tracking_id' => null,
        'tracking_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'item_sets' => 'item_sets',
        'pickup' => 'pickup',
        'delivery' => 'delivery',
        'delivery_time_window' => 'delivery_time_window',
        'pickup_time_window' => 'pickup_time_window',
        'shipped_by' => 'shipped_by',
        'shipping_date' => 'shipping_date',
        'shipping_label' => 'shipping_label',
        'state' => 'state',
        'tracking_id' => 'tracking_id',
        'tracking_url' => 'tracking_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'item_sets' => 'setItemSets',
        'pickup' => 'setPickup',
        'delivery' => 'setDelivery',
        'delivery_time_window' => 'setDeliveryTimeWindow',
        'pickup_time_window' => 'setPickupTimeWindow',
        'shipped_by' => 'setShippedBy',
        'shipping_date' => 'setShippingDate',
        'shipping_label' => 'setShippingLabel',
        'state' => 'setState',
        'tracking_id' => 'setTrackingId',
        'tracking_url' => 'setTrackingUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'item_sets' => 'getItemSets',
        'pickup' => 'getPickup',
        'delivery' => 'getDelivery',
        'delivery_time_window' => 'getDeliveryTimeWindow',
        'pickup_time_window' => 'getPickupTimeWindow',
        'shipped_by' => 'getShippedBy',
        'shipping_date' => 'getShippingDate',
        'shipping_label' => 'getShippingLabel',
        'state' => 'getState',
        'tracking_id' => 'getTrackingId',
        'tracking_url' => 'getTrackingUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['item_sets'] = $data['item_sets'] ?? null;
        $this->container['pickup'] = $data['pickup'] ?? null;
        $this->container['delivery'] = $data['delivery'] ?? null;
        $this->container['delivery_time_window'] = $data['delivery_time_window'] ?? null;
        $this->container['pickup_time_window'] = $data['pickup_time_window'] ?? null;
        $this->container['shipped_by'] = $data['shipped_by'] ?? null;
        $this->container['shipping_date'] = $data['shipping_date'] ?? null;
        $this->container['shipping_label'] = $data['shipping_label'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['tracking_id'] = $data['tracking_id'] ?? null;
        $this->container['tracking_url'] = $data['tracking_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_sets'] === null) {
            $invalidProperties[] = "'item_sets' can't be null";
        }
        if ($this->container['pickup'] === null) {
            $invalidProperties[] = "'pickup' can't be null";
        }
        if ($this->container['delivery'] === null) {
            $invalidProperties[] = "'delivery' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item_sets
     *
     * @return \BrengerClient\Model\ItemSetPart[]
     */
    public function getItemSets()
    {
        return $this->container['item_sets'];
    }

    /**
     * Sets item_sets
     *
     * @param \BrengerClient\Model\ItemSetPart[] $item_sets item_sets
     *
     * @return self
     */
    public function setItemSets($item_sets)
    {
        $this->container['item_sets'] = $item_sets;

        return $this;
    }

    /**
     * Gets pickup
     *
     * @return \BrengerClient\Model\ShipmentPickup
     */
    public function getPickup()
    {
        return $this->container['pickup'];
    }

    /**
     * Sets pickup
     *
     * @param \BrengerClient\Model\ShipmentPickup $pickup pickup
     *
     * @return self
     */
    public function setPickup($pickup)
    {
        $this->container['pickup'] = $pickup;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \BrengerClient\Model\ShipmentPickup
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \BrengerClient\Model\ShipmentPickup $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets delivery_time_window
     *
     * @return \BrengerClient\Model\TimeWindow|null
     */
    public function getDeliveryTimeWindow()
    {
        return $this->container['delivery_time_window'];
    }

    /**
     * Sets delivery_time_window
     *
     * @param \BrengerClient\Model\TimeWindow|null $delivery_time_window delivery_time_window
     *
     * @return self
     */
    public function setDeliveryTimeWindow($delivery_time_window)
    {
        $this->container['delivery_time_window'] = $delivery_time_window;

        return $this;
    }

    /**
     * Gets pickup_time_window
     *
     * @return \BrengerClient\Model\TimeWindow|null
     */
    public function getPickupTimeWindow()
    {
        return $this->container['pickup_time_window'];
    }

    /**
     * Sets pickup_time_window
     *
     * @param \BrengerClient\Model\TimeWindow|null $pickup_time_window pickup_time_window
     *
     * @return self
     */
    public function setPickupTimeWindow($pickup_time_window)
    {
        $this->container['pickup_time_window'] = $pickup_time_window;

        return $this;
    }

    /**
     * Gets shipped_by
     *
     * @return \BrengerClient\Model\ShippedBy|null
     */
    public function getShippedBy()
    {
        return $this->container['shipped_by'];
    }

    /**
     * Sets shipped_by
     *
     * @param \BrengerClient\Model\ShippedBy|null $shipped_by shipped_by
     *
     * @return self
     */
    public function setShippedBy($shipped_by)
    {
        $this->container['shipped_by'] = $shipped_by;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return string|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param string|null $shipping_date shipping_date
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets shipping_label
     *
     * @return \BrengerClient\Model\CreatedShipmentAllOf1ShippingLabel|null
     */
    public function getShippingLabel()
    {
        return $this->container['shipping_label'];
    }

    /**
     * Sets shipping_label
     *
     * @param \BrengerClient\Model\CreatedShipmentAllOf1ShippingLabel|null $shipping_label shipping_label
     *
     * @return self
     */
    public function setShippingLabel($shipping_label)
    {
        $this->container['shipping_label'] = $shipping_label;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return string|null
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string|null $tracking_id tracking_id
     *
     * @return self
     */
    public function setTrackingId($tracking_id)
    {
        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url tracking_url
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


